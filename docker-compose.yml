services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8088:8088"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml:ro
      - ./traefik/letsencrypt:/etc/traefik # letsencrypt 데이터용 디렉토리 마운트
    networks:
      - web # web 네트워크 연결
    environment:
      - TRAEFIK_DASHBOARD_AUTH=admin:$$apr1$$HtfOXLKL$$QMj0r2dHvy0FnkLG.STWR1 # 대시보드 인증 정보 (admin/mypassword)
    # labels:
      # 대시보드는 직접 포트로 접근
  db:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: database
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql # 로그 마운트
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sa -d database" ]
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - postgres
      - "-c"
      - "logging_collector=on"
      - "-c"
      - "log_directory=/var/log/postgresql"
      - "-c"
      - "log_filename=postgresql.log"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_min_duration_statement=1000"
      - "-c"
      - "log_connections=on"
      - "-c"
      - "log_disconnections=on"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333" # HTTP API 포트
      - "6334:6334" # gRPC 포트
    volumes:
      - qdrant_data:/qdrant/storage # 벡터 데이터 영구 저장을 위한 볼륨
    networks:
      - backend
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - backend
      - web
    restart: unless-stopped
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.middlewares=rate-limit@file"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"

volumes:
  postgres_data:
  qdrant_data:

networks:
  backend:
    name: backend
  web:
    external: true


