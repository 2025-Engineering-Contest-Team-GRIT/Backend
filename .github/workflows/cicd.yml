name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # CI: 모든 브랜치에서 빌드 및 테스트
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Build application
      run: ./gradlew build -x test
      
  # CD: main 브랜치에서만 Docker 이미지 빌드 및 배포
  cd:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/guidance
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Docker Hub 업로드 후 서버 배포
    - name: List files before copy
      run: |
        ls -la
        ls -la traefik/
        ls -la traefik/*
        
    - name: Test SSH connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo "SSH connection successful!"
          whoami
          pwd
        
    - name: Create tar archive
      run: |
        tar -czf traefik-files.tar.gz traefik/
        ls -la traefik-files.tar.gz
        ls -la traefik/
        
    - name: Copy files to server
      uses: appleboy/scp-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: |
          traefik-files.tar.gz
          docker-compose.prod.yml
        target: "/home/ymkim2353"
        overwrite: true
        

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # 필요한 디렉토리 생성
          sudo mkdir -p traefik/letsencrypt
          sudo chmod 600 traefik/letsencrypt/acme.json
          
          # tar 파일 압축 해제
          tar -xzf traefik-files.tar.gz
          
          # 환경변수 설정
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          echo POSTGRES_URL=${{ secrets.POSTGRES_URL }}
          echo OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          echo SPRING_PROFILES_ACTIVE=dev

          # Docker Compose 실행
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d
